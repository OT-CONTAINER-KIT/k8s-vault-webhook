(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{358:function(s,e,a){s.exports=a.p+"assets/img/consul-install.363668f5.png"},359:function(s,e,a){s.exports=a.p+"assets/img/consul-pods.914a7b8f.png"},360:function(s,e,a){s.exports=a.p+"assets/img/vault-helm.edaa515b.png"},361:function(s,e,a){s.exports=a.p+"assets/img/vault-pods.2a9ddcc9.png"},362:function(s,e,a){s.exports=a.p+"assets/img/vault-init.b8e03aa1.png"},363:function(s,e,a){s.exports=a.p+"assets/img/vault-unseal.3f4a6d14.png"},380:function(s,e,a){"use strict";a.r(e);var t=a(45),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"vault-setup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vault-setup"}},[s._v("#")]),s._v(" Vault Setup")]),s._v(" "),t("p",[s._v("Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.")]),s._v(" "),t("p",[s._v("A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution.")]),s._v(" "),t("h2",{attrs:{id:"consul"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#consul"}},[s._v("#")]),s._v(" Consul")]),s._v(" "),t("p",[s._v("But before setting up Vault, we have to setup a key-value store for it. We are going to use "),t("a",{attrs:{href:"https://consul.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hashicorp Consul"),t("OutboundLink")],1),s._v(" for our datastore.")]),s._v(" "),t("p",[s._v("Add the HashiCorp Helm Repository:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ helm repo "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" hashicorp https://helm.releases.hashicorp.com\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hashicorp"')]),s._v(" has been added to your repositories\n")])])]),t("p",[s._v("Ensure you have access to the consul chart:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ helm search repo hashicorp/consul\nNAME                CHART VERSION   APP VERSION DESCRIPTION\nhashicorp/consul    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.20")]),s._v(".1          "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7")]),s._v(".2       Official HashiCorp Consul Chart\n")])])]),t("p",[s._v("Now you’re ready to install Consul! To install Consul with the default configuration using Helm 3 run:")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ helm "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" consul hashicorp/consul "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --set global.name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("consul --namespace vault\n")])])]),t("p",[t("img",{attrs:{src:a(358),alt:""}})]),s._v(" "),t("p",[s._v("Let’s verify the consul pods.")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl get pods -n vault -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("consul\n")])])]),t("p",[t("img",{attrs:{src:a(359),alt:""}})]),s._v(" "),t("h2",{attrs:{id:"vault"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vault"}},[s._v("#")]),s._v(" Vault")]),s._v(" "),t("p",[s._v("Once the consul cluster is ready, let’s try to install vault cluster with HA mode. Also we will change the datastore of vault to consul.")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("EOF"),t("span",{pre:!0,attrs:{class:"token bash punctuation"}},[s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ./override-values.yaml")]),s._v('\nserver:\n  ha:\n    enabled: true\n    replicas: 3\n    config: |\n      ui = true\n\n      listener "tcp" {\n          tls_disable = 1\n          address = "[::]:8200"\n          cluster_address = "[::]:8201"\n      }\n\n      storage "consul" {\n          path = "vault"\n          address = "consul-server:8500"\n      }\nEOF')]),s._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ helm "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" vault -f override-values.yaml "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    hashicorp/vault --namespace vault\n")])])]),t("p",[t("img",{attrs:{src:a(360),alt:""}})]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl get pods -n vault -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("release")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("vault\n")])])]),t("p",[t("img",{attrs:{src:a(361),alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("Note:- You will see your vault pods are not in Ready state because vault is still sealed. We need to unseal it before using it.")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-0 -n vault -- vault operator init\nUnseal Key "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": mK1PeGrP+A+QidoKzsYIpaAhszwaMCGd0dUMGZ1JWWoQ\nUnseal Key "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(": q2bazJZReOhY2yfJmJ8puS2FLF4mpWqlE6umws4M2lwl\nUnseal Key "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(": fnpqx2xpAtI4iTU8iTA3uFM5xP/yDqnsPMsDzVTEyqPa\nUnseal Key "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(": I2D1KeIA3lIqdlodRL1AeFBmvBoy92mg8kno3QD0mKN0\nUnseal Key "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(": cNpXnigDnm/djUED5UE0nhAc3wXrfvIDKWQoVgzn5X5b\n\nInitial Root Token: s.XP91VwITtMaMhiL1JMHzFpSR\n\nVault initialized with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" key shares and a key threshold of "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(". Please securely\ndistribute the key shares printed above. When the Vault is re-sealed,\nrestarted, or stopped, you must supply at least "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" of these keys to unseal it\nbefore it can start servicing requests.\n\nVault does not store the generated master key. Without at least "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" key to\nreconstruct the master key, Vault will remain permanently sealed"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\nIt is possible to generate new unseal keys, provided you have a quorum of\nexisting unseal keys shares. See "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vault operator rekey"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" information.\n")])])]),t("p",[t("img",{attrs:{src:a(362),alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("Note:- Save the output at a special secure place, because this will be required to login in Vault as root user. Use first three unseal tokens to unseal the vault.")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-0 -n vault -- vault operator unseal mK1PeGrP+A+QidoKzsYIpaAhszwaMCGd0dUMGZ1JWWoQ\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-0 -n vault -- vault operator unseal q2bazJZReOhY2yfJmJ8puS2FLF4mpWqlE6umws4M2lwl\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-0 -n vault -- vault operator unseal fnpqx2xpAtI4iTU8iTA3uFM5xP/yDqnsPMsDzVTEyqPa\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-1 -n vault -- vault operator unseal mK1PeGrP+A+QidoKzsYIpaAhszwaMCGd0dUMGZ1JWWoQ\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-1 -n vault -- vault operator unseal q2bazJZReOhY2yfJmJ8puS2FLF4mpWqlE6umws4M2lwl\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-1 -n vault -- vault operator unseal fnpqx2xpAtI4iTU8iTA3uFM5xP/yDqnsPMsDzVTEyqPa\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-2 -n vault -- vault operator unseal mK1PeGrP+A+QidoKzsYIpaAhszwaMCGd0dUMGZ1JWWoQ\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-2 -n vault -- vault operator unseal q2bazJZReOhY2yfJmJ8puS2FLF4mpWqlE6umws4M2lwl\n$ kubectl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it vault-2 -n vault -- vault operator unseal fnpqx2xpAtI4iTU8iTA3uFM5xP/yDqnsPMsDzVTEyqPa\n")])])]),t("p",[t("img",{attrs:{src:a(363),alt:""}})]),s._v(" "),t("p",[s._v("The pods will become ready as soon as vault is unsealed.")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("$ kubectl get pods -n vault -l app.kubernetes.io/instance"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("vault\nNAME                                    READY   STATUS    RESTARTS   AGE\nvault-agent-injector-77fbb4d4f8-l4x45   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          18m\nvault-0                                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          18m\nvault-1                                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          18m\nvault-2                                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("/1     Running   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("          18m\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);